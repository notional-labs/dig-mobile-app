# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "develop" branch
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: "${{ matrix.bot }} (${{ matrix.dart-version }}/${{ matrix.code-version }}/${{ matrix.os }})"
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        dart-version: [stable, dev]
        # for now, code-version will mirror dart-version to reduce number of bots
        # code-version: [stable] #, insiders]
        bot: [flutter_debug, flutter_test_debug, flutter_repo, dart_debug, dart, flutter, misc]
        include:
          - dart-version: stable
            flutter-version: beta
            code-version: stable
          - dart-version: dev
            flutter-version: dev
            code-version: insiders

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Note: This workflow uses the latest stable version of the Dart SDK.
      # You can specify other versions if desired, see documentation here:
      # https://github.com/dart-lang/setup-dart/blob/main/README.md
      # - uses: dart-lang/setup-dart@v1
#       - uses: dart-lang/setup-dart@9a04e6d73cca37bd455e0608d7e5092f881fd603

      - name: Setup XVFB
        if: matrix.os == 'ubuntu-latest'
        run: Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

      - name: Setup Dart ${{ matrix.dart-version }}
        uses: DanTup/gh-actions/setup-dart@master
        with:
          channel: ${{ matrix.dart-version }}

      - name: Setup Flutter ${{ matrix.flutter-version }}
        id: flutter
        if: "!startsWith(matrix.bot, 'dart')"
        uses: DanTup/gh-actions/setup-flutter@master
        with:
          channel: ${{ matrix.flutter-version }}
      
      - run: flutter update-packages
        if: matrix.bot == 'flutter_repo'

      - name: Print Dart version
        run: dart --version

      - name: Print Flutter version
        if: "!startsWith(matrix.bot, 'dart')"
        run: flutter --version

      - name: Install dependencies
        run: |
          cd dig_core/ 
          flutter pub get
          cd .. 
          flutter pub get 
          
      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: flutter analyze
        
      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
#       - name: Run tests
#         run: dart test

      # Runs a single command using the runners shell
#       - name: Run a one-line script
#         run: echo Hello, world!

      # Runs a set of commands using the runners shell
#       - name: Run a multi-line script
#         run: |
#           echo Add other actions to build,
#           echo test, and deploy your project.
